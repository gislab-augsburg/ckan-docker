- Validation Error: {'Extras': 'Es gibt ein Vorlagefeld mit dem gleichen Namen'} prevents import.
Reason: field name in extras and in schema cannot be the same
See https://github.com/ckan/ckanext-scheming/issues/14
Workaround: Solution 2
(Validators in schema like convert_from_extras, convert_to_extras, keep_extras do not help)

- Target Schema/ package type/ dataset_type can be specified in Harvest Source Configuration (with our ckanext-iso/plugins.py):
{
"default_extras": {"target_dataset_type":"isodata"}
}
If not specified, 'dataset' is used, no matter what ckan.default.package_type is defining

- Value Mapping can be done in ckanext-iso/plugins.py
Fields assigned in ckanext-iso/plugins.py do not have to be in schema, if not they still remain in database (mostly in package_extras)
Fields that are in schema have to be assigned in ckanext-iso/plugins.py id not assigned before in base.py, otherwise they remain empty.

- Validation errors that are not affecting import has to be figured out.
Dependent from ckan.spatial.validator.profiles like iso19115, iso19115eden etc.
Can be overridden by ckanext.spatial.harvest.continue_on_validation_errors = true

- Update in case of CSW-Harvester does not check values, but is controlled only by 
harvest_object.metadata_modified_date <= previous_object.metadata_modified_date
first comes from iso_values['metadata-date'], second comes from bd table harvest_object, field metadate_modified_date
Changes resulting from changes in ckanext-iso/plugin.py or other not affecting date in isodata do not cause update. 
-> This can be overridden by changing ckanext-spatial/harvesters/base.py:
https://github.com/ckan/ckanext-spatial/blob/938308469892e4bcf7389cb4adee5ccdd5a0ccca/ckanext/spatial/harvesters/base.py#L679
-> include 'self.force_import = True'
Trials to include this into ckanext-iso were not successfull, because there is no interface pointing to function 'import_stage'
Update:
--> Including this into ckanext-iso/plugin.py is working: link to repo
--> set force_import with default extra "force_import":
{
"default_extras": {"target_dataset_type":"isodata", "force_import":"true"}
}

- Deleting datasets via GUI or API (= deleting in DB table packages) without deleting the harvest objeccts (DB table harvest_objects) brings confusion !!!

- Harvesting datasets with different schemas (e.g. one time dataset, next time isodata) brings confusion !!! This has to be clearly seperated

- Mapping of organizations (and analogue of groups etc.) can be done in ckanext-iso/plugins.py with MApping key like in mapping_orgas.json

- ckan harvester source clear <source-id>: clears all objects, jobs etc. AND ALSO ALL DATASETS!
- ckan harvester source clear-history <source-id>: clears all objects, jobs etc., not datasaets, 
BUT next harvesting will produce new dataset (double) cause no harvest object available :(
- ckan harvester source clear-history <source-id> -k true: keeps current objects (DB table harvest_object, field current = true)
and waiting objects (DB table harvest_object, field state = WAITING)  
deletes non-current, non-waiting objects,  keeps datasets :)) -> the way to go
 